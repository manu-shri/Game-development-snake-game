#include <SFML/Graphics.hpp>
#include <deque>
#include <cstdlib>
#include <ctime>

const int windowWidth = 400;
const int windowHeight = 400;
const int blockSize = 20;

enum class Direction { Up, Down, Left, Right };

class SnakeGame {
public:
    SnakeGame() : direction(Direction::Right), gameOver(false) {
        window.create(sf::VideoMode(windowWidth, windowHeight), "Simple Snake Game");
        srand(static_cast<unsigned>(time(0)));
        
        // Initialize the snake's starting position
        snake.push_back(sf::RectangleShape(sf::Vector2f(blockSize, blockSize)));
        snake[0].setFillColor(sf::Color::Green);

        // Spawn food at a random position
        spawnFood();
    }

    void run() {
        sf::Clock clock;
        while (window.isOpen()) {
            float deltaTime = clock.restart().asSeconds();
            handleEvents();
            if (!gameOver) {
                update();
                render();
            } else {
                window.clear();
                renderGameOver();
                window.display();
            }
        }
    }

private:
    sf::RenderWindow window;
    std::deque<sf::RectangleShape> snake;
    Direction direction;
    sf::RectangleShape food;
    bool gameOver;

    void handleEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Up && direction != Direction::Down)
                    direction = Direction::Up;
                if (event.key.code == sf::Keyboard::Down && direction != Direction::Up)
                    direction = Direction::Down;
                if (event.key.code == sf::Keyboard::Left && direction != Direction::Right)
                    direction = Direction::Left;
                if (event.key.code == sf::Keyboard::Right && direction != Direction::Left)
                    direction = Direction::Right;
            }
        }
    }

    void update() {
        if (gameOver) return;

        // Move the snake
        sf::RectangleShape newHead = snake.front();
        switch (direction) {
        case Direction::Up: newHead.move(0, -blockSize); break;
        case Direction::Down: newHead.move(0, blockSize); break;
        case Direction::Left: newHead.move(-blockSize, 0); break;
        case Direction::Right: newHead.move(blockSize, 0); break;
        }

        snake.push_front(newHead);  // Add new head to the front

        // Check if snake eats food
        if (newHead.getGlobalBounds().intersects(food.getGlobalBounds())) {
            spawnFood();
        } else {
            snake.pop_back();  // Remove the tail if no food eaten
        }

        // Check for collisions with walls or self
        if (newHead.getPosition().x < 0 || newHead.getPosition().x >= windowWidth ||
            newHead.getPosition().y < 0 || newHead.getPosition().y >= windowHeight) {
            gameOver = true;
        }

        for (size_t i = 1; i < snake.size(); ++i) {
            if (newHead.getGlobalBounds().intersects(snake[i].getGlobalBounds())) {
                gameOver = true;
            }
        }
    }

    void spawnFood() {
        food.setSize(sf::Vector2f(blockSize, blockSize));
        food.setFillColor(sf::Color::Red);
        food.setPosition(rand() % (windowWidth / blockSize) * blockSize,
                         rand() % (windowHeight / blockSize) * blockSize);
    }

    void render() {
        window.clear();
        for (const auto& segment : snake) {
            window.draw(segment);
        }
        window.draw(food);
        window.display();
    }

    void renderGameOver() {
        sf::Font font;
        if (!font.loadFromFile("arial.ttf")) {
            exit(1);
        }

        sf::Text gameOverText;
        gameOverText.setFont(font);
        gameOverText.setString("Game Over!");
        gameOverText.setCharacterSize(30);
        gameOverText.setFillColor(sf::Color::White);
        gameOverText.setPosition(windowWidth / 2 - gameOverText.getLocalBounds().width / 2,
                                 windowHeight / 2 - gameOverText.getLocalBounds().height / 2);
        window.draw(gameOverText);
    }
};

int main() {
    SnakeGame game;
    game.run();
    return 0;
}
